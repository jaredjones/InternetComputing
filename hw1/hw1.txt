Files you check in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Each of you are expected to put in your reasonable share of effort into it.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat. Your last check in before the deadline will be graded. So, if you break the code (in assignments) before the deadline, you will lose.

Please feel free to ask for frequent reviews (see the reviews/readme.txt file for details on how to ask for reviews).

You can evolve the answers and solutions based on the reviews to your pair and to other pairs in the course. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

Now to homework #1.

===============================================================================
Homework 1: Due July 13th, 11:59PM

To answer this question, read, but express the ideas in your own words. If something that you read is very expressive and you like to use it, you can use the exact words, but place the words within quotes and provide reference. Copying and pasting sentences or paragraphs from other sources is considered plagiarism, so don't copy and paste (or type exact words without proper reference).

1. What's hoisting in JavaScript?

It’s Javascript’s behavior of moving declarations to the top. This means you can declare a variable, lets say ‘x = 5’ at the top of your program. But then you initialize x as ‘var x’ at the very bottom of your program and you will still get a functioning program. It’s a better practice to declare your variables at the beginning of the program but this is just one of many interesting default behavior of javascript.

2. What's the difference between calling a function directly and calling it with call or apply?

Calling a function directly is common but not good practice. When you call a function directly you are making the function not aware of the scope. Example:

var person = {name: ‘Tim’}
var person2 = {name: ‘Jared’};
var myFunction = function { return this.name; }

myFunction();


While on the other hand calling a function with call or apply they execute the function in  the scope of the first argument you pass to them. Example:

myFunction.call(person);
myFunction.apply(person2);

3. When would you use call vs. apply?

Lets say you have more than one argument being passed into a function but know what the type is and how many there will be. You would use call in this case. If you have a function that requires an array of passed data you would use apply.
