Files you check in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Each of you are expected to put in your reasonable share of effort into it.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat. Your last check in before the deadline will be graded. So, if you break the code (in assignments) before the deadline, you will lose.

Please feel free to ask for frequent reviews (see the reviews/readme.txt file for details on how to ask for reviews).

You can evolve the answers and solutions based on the reviews to your pair and to other pairs in the course. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

Now to homework #1.

===============================================================================
Homework 1: Due July 13th, 11:59PM

To answer this question, read, but express the ideas in your own words. If something that you read is very expressive and you like to use it, you can use the exact words, but place the words within quotes and provide reference. Copying and pasting sentences or paragraphs from other sources is considered plagiarism, so don't copy and paste (or type exact words without proper reference).

1. What's hoisting in JavaScript?

Hoisting is the ability to assign a value to an object before it has been declared. For instance, a variable may be assigned to ‘x=10’ without the variable having been defined as long as the variable is defined later on in the program. It is also interesting to note that if a variable is redefined later on in the program, the previous declaration will be overwritten. This all works because the JavaScript preprocessor scans through the document looking for variable definitions before the code is executed and moves them to the top, this is called hoisting.

Hoisting may also be used by calling a function before before it has been defined; however, this behavior only works with functions that are declared without having been assigned to a variable. This differs from variable hoisting above, because when a function is assigned to a variable and it has been called before it has been declared, the interpreter will throw an “undefined function” error. It is important to remember that function declarations are hoisted first before variable declarations, but not over variable assignments, this is how function hoisting differs from variable hoisting.

2. What's the difference between calling a function directly and calling it with call or apply?

Calling a function using 'call' or 'apply' allows the ability to change an object’s context for the called function. This works by passing into the first argument of either call/apply a context object for the function you are calling. From this point the function is then able to reference its changed context object by using the "this" keyword. Changing the context of a function can be particularly useful when we need to take over the scope of the function that was called.

3. When would you use call vs. apply?

Call should be used when you have a list of arguments separated by a comma that you want to pass into a function. On the other hand, use ‘apply’ whenever you are passing an array of arguments to a function. Both of these functions are used when changing the context of a function.

